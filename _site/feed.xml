<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">CPrograming</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-10-09T10:57:39+08:00</updated>
<id>/</id>
<author>
  <name>vanCopper</name>
  <uri>/</uri>
  <email>vancopperm@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Note]]></title>
  <link rel="alternate" type="text/html" href="/CNote/" />
  <id>/CNote</id>
  <updated>2014-09-03T00:00:00-00:00</updated>
  <published>2014-09-04T00:00:00+08:00</published>
  
  <author>
    <name>vanCopper</name>
    <uri></uri>
    <email>vancopperm@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;printf-&quot;&gt;printf 格式说明：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;%d&lt;/code&gt; 按照十进制整数打印 &lt;code&gt;printf(&quot;%d\n&quot;, 100)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%6d&lt;/code&gt; 按照十进制整数打印，至少6个字符宽&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%f&lt;/code&gt; 按照浮点数打印&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%6f&lt;/code&gt; 按照浮点数打印，至少6个字符宽&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%.2f&lt;/code&gt; 按照浮点数打印， 小数点后有两位数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%6.2f&lt;/code&gt; 按照浮点数打印，至少6个字符宽，小数点后有两位数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%o&lt;/code&gt; 八进制打印&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%x&lt;/code&gt; 十六进制打印&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%c&lt;/code&gt; 表示字符&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%s&lt;/code&gt; 字符串打印&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;define-&quot;&gt;define 用法&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;#define&lt;/code&gt;定义符号常量：&lt;code&gt;#define LOWER 0&lt;/code&gt; 注意结尾无分号。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;#define&lt;/code&gt;定义函数： 定义通用取数组长度的函数&lt;code&gt;#define GET_ARRAY_LEN(array, len) len = (sizeof(array) / sizeof(array[0]));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;c&quot;&gt;C语言中的参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;传递给被调用函数的参数值存放在临时变量中，而不是存放在原来的变量中。（与ActionScript3中类似）&lt;/li&gt;
  &lt;li&gt;但是可以通过&lt;code&gt;指针&lt;/code&gt;来实现被调用函数可直接修改调用函数中的变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;//取指向a，b的指针 T
swap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;a, &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
//声明参数为指针类型，并交换指针以达到变量a,b互换的目的
void swap&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int *px, int *py&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    int temp&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; *px
    *px &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; *py
    *py &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; temp
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;c-&quot;&gt;C语言中的 数据类型及长度&lt;/h3&gt;

&lt;p&gt;C语言只提供了下列几种基本数据类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;char&lt;/code&gt; 字符型，占一个字节，可以存放本地字符集中的一个字符&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int&lt;/code&gt; 整型&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;float&lt;/code&gt; 单精度浮点型&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;double&lt;/code&gt; 双精度浮点型&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;short&lt;/code&gt; 限定符，通常16位。如：&lt;code&gt;short int...&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;long&lt;/code&gt; 限定符，通常32位。如：&lt;code&gt;long int....&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;signed&lt;/code&gt; 类型限定符，有符号类型&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;unsigned&lt;/code&gt; 类型限定符，无符号类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extern&quot;&gt;extern用法&lt;/h3&gt;
&lt;p&gt;如果要在外部变量的定义之前使用该变量，或者外部变量的使用与定义在不同的源文件中，则必须在相应的变量声明中强制使用关键字&lt;code&gt;extern&lt;/code&gt;。另外&lt;code&gt;extern&lt;/code&gt;只是声明了变量并没有定义变量，也就是声明变量不会为之分配储存单元，而定义变量则会为之分配储存单元。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //在文件a中声明外部变量并使用
    extern int sp;
    extern double val[];

    void push(double f) {....}

    //在文件b中定义了变量
    int sp = 0;
    double val[MAXVAL];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;static&quot;&gt;静态变量 static&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;static&lt;/code&gt;用于外部变量时，该变量只可被变量所在文件的剩余源码部分访问。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static&lt;/code&gt;用于函数时，该函数只可被当前文件访问&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static&lt;/code&gt;用于内部变量时，改变量会一直存在于该函数内，而不会像自动变量一样自动存在和消失。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;寄存器变量&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;register int x;
register char c;

f(register unsigned m)
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;register&lt;/code&gt;声明告诉编译器，它所声明的变量在程序中使用频率较高。其思想就是，将&lt;code&gt;register&lt;/code&gt;变量放在机器的寄存器中，这样可以使程序更小，执行速度更快，但编译器可以忽略此选项。
&lt;code&gt;register&lt;/code&gt;只适用与自动变量和函数的形式参数，如上面的代码所示。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;条件包含&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;#if...#elif...#else...#endif&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if 语句对其中的常量整型表达式求值&lt;/p&gt;

&lt;pre&gt;
#if SYSTEM == SYSV
    #define HDR &quot;sysv.h&quot;
#elif SYSTEM == BSD
    #define HDR &quot;bsd.h&quot;
#else
    #define HDR &quot;default.h&quot;
#endif
&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;指针&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;结构体&lt;/h3&gt;


  &lt;p&gt;&lt;a href=&quot;/CNote/&quot;&gt;Note&lt;/a&gt; was originally published by vanCopper at &lt;a href=&quot;&quot;&gt;CPrograming&lt;/a&gt; on September 04, 2014.&lt;/p&gt;</content>
</entry>

</feed>
